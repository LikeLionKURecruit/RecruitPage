"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import my_settings
from pathlib import Path


DATABASES = my_settings.DATABASES
SECRET_KEY = my_settings.SECRET_KEY


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-n4o-+oaj6nueh5lol16sdw#^9ekb72xt2@pv5k#r5+_vk#f3uw'#추후에 분리

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

CORS_ALLOWED_ORIGINS = [
    # 허용할 리액트 앱의 URL을 여기에 추가합니다.
    'http://localhost',  # 예시 URL
    'http://49.50.174.43',
    'http://49.50.174.43:3000',
    'http://101.101.216.213',
    'http://www.likelionkonkuk.com',
]

# Application definition

INSTALLED_APPS = [
    'corsheaders', # CORS 관련 추가'
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #app
    'exhibition',
    'rest_framework',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',     # CORS 관련 추가
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

'''
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
'''

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


## 로그를 사용하여 사용자의 행동 패턴 분석에 사용 ##
def doRollover(self):
    if self.stream:
        self.stream.close()
        self.stream = None

    # Call the parent class method to do the actual rollover
    super().doRollover()

    # Get the current log file
    current_log_file = f"{self.baseFilename}.{self.backupCount}"

    # Check if the current log file is too large
    if os.path.getsize(current_log_file) >= self.maxFileSize:

        # Upload the current log file to Google Storage Bucket
        dest_blob_name = os.path.join('logs', os.path.basename(current_log_file))
        self.upload_to_google_storage(current_log_file, dest_blob_name)

        # Remove the current log file
        os.remove(current_log_file)

        # Create a new log file
        self.new_log_file = f"{self.baseFilename}.{self.backupCount + 1}"
        self.stream = open(self.new_log_file, 'a')



LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'csv': {
            'format': '%(asctime)s,%(levelname)s,%(message)s'
        },
        
        'recruit_verbose': { # render한 정보에 대한 로그
            'format': '{levelname},{asctime},{message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        
    },

    'handlers': {
    'user_action': {
        'level': 'DEBUG',
        'class': 'logging.handlers.RotatingFileHandler',  # Changed to local file handler
        'filename':  '/home/sonsb129/workspace/logs/user_action.csv',  # Changed the filename
        'formatter': 'csv',
        'maxBytes': 1024*1024*10,
        'backupCount': 10,
        # Removed bucket_name and credentials_file as they are not needed for local storage
    },
    
    'other_action': { 
        'level': 'DEBUG',
        'class': 'logging.handlers.RotatingFileHandler',  # Changed to local file handler
        'filename':  '/home/sonsb129/workspace/logs/other_action.csv',  # Changed the filename
        'formatter': 'csv',
        'maxBytes': 1024*1024*10,
        'backupCount': None,  # Set the number of backup logs you want
        # Removed bucket_name and credentials_file as they are not needed for local storage
        },
    },

    'loggers': {
        'board': {
            'handlers': ['other_action'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'main': {
            'handlers': ['user_action'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'random': {
            'handlers': ['user_action'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'detail': {
            'handlers': ['user_action'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}
## 로그를 사용하여 사용자의 행동 패턴 분석에 사용 (불필요시 삭제)##
